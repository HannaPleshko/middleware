{
	"info": {
		"_postman_id": "89233986-2b4d-45c3-b1ab-0d42484cf9c2",
		"name": "ews",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "failure test",
			"item": [
				{
					"name": "Invalid xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <Header>\n      <RequestServerVersion Version=\"Exchange2016\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\"/>\n   </Header>\n   <Body>\n      <GetUserPhoto xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n         <Email>leviastan@llqdev.onmicrosoft.com</Email>\n         <SizeRequested>HR48x48</SizeRequested>\n         <TypeRequested>UserPhoto</TypeRequested>\n      </GetUserPhoto\n   </Body>\n</Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <Header>\n      <RequestServerVersion Version=\"Exchange2016\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\"/>\n   </Header>\n   <Body>\n      <GetUserPhotoaaaa xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n         <Email>leviastan@llqdev.onmicrosoft.com</Email>\n         <SizeRequested>HR48x48</SizeRequested>\n         <TypeRequested>UserPhoto</TypeRequested>\n      </GetUserPhotoaaaa>\n   </Body>\n</Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.expect(pm.response.text()).to.include(\"ErrorAccessDenied\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Header>\n    <t:RequestServerVersion Version=\"Exchange2016\" />\n  </soap:Header>\n  <soap:Body>\n    <m:GetUserOofSettingsRequest>\n      <t:Mailbox>\n        <t:Address>NotFound@tc.com</t:Address>\n      </t:Mailbox>\n    </m:GetUserOofSettingsRequest>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "autodiscover",
			"item": [
				{
					"name": "GetDomainSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<soap:Envelope xmlns:a=\"https://schemas.microsoft.com/exchange/2010/Autodiscover\"\n               xmlns:wsa=\"http://www.w3.org/2005/08/addressing\"\n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"> \n    <soap:Header> \n        <a:RequestedServerVersion>Exchange2010</a:RequestedServerVersion>\n        <wsa:Action>https://schemas.microsoft.com/exchange/2010/Autodiscover/Autodiscover/GetDomainSettings</wsa:Action>\n        <wsa:To>https://autodiscover.exchange.microsoft.com/autodiscover/autodiscover.svc</wsa:To>\n    </soap:Header> \n    <soap:Body> \n        <a:GetDomainSettingsRequestMessage>\n            <a:Request> \n                <a:Domains> \n                    <a:Domain>contoso.com</a:Domain> \n                </a:Domains> \n                <a:RequestedSettings> \n                    <a:Setting>ExternalEwsUrl</a:Setting> \n                </a:RequestedSettings> \n            </a:Request> \n        </a:GetDomainSettingsRequestMessage> \n    </soap:Body> \n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/autodiscover/autodiscover.svc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"autodiscover",
								"autodiscover.svc"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:a=\"https://schemas.microsoft.com/exchange/2010/Autodiscover\"      \n               xmlns:wsa=\"http://www.w3.org/2005/08/addressing\" \n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"      \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Header>\n    <a:RequestedServerVersion>Exchange2010</a:RequestedServerVersion>\n    <wsa:Action>https://schemas.microsoft.com/exchange/2010/Autodiscover/Autodiscover/GetUserSettings</wsa:Action>\n    <wsa:To>https://myserver.contoso.com/autodiscover/autodiscover.svc</wsa:To>\n  </soap:Header>\n  <soap:Body>\n    <a:GetUserSettingsRequestMessage xmlns:a=\"https://schemas.microsoft.com/exchange/2010/Autodiscover\">\n      <a:Request>\n        <a:Users>\n          <a:User>\n            <a:Mailbox>UserName@domain.contoso.com</a:Mailbox>\n          </a:User>\n        </a:Users>\n        <a:RequestedSettings>\n          <a:Setting>UserDisplayName</a:Setting>\n          <a:Setting>EwsSupportedSchemas</a:Setting>\n          <a:Setting>ExternalEwsUrl</a:Setting>\n        </a:RequestedSettings>\n      </a:Request>\n    </a:GetUserSettingsRequestMessage>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/autodiscover/autodiscover.svc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"autodiscover",
								"autodiscover.svc"
							]
						}
					},
					"response": []
				},
				{
					"name": "POX autodiscover",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Autodiscover\n    xmlns=\"http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006\">\n    <Request>\n        <EMailAddress>test@65744797.ngrok.io</EMailAddress>\n        <AcceptableResponseSchema>http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a</AcceptableResponseSchema>\n    </Request>\n</Autodiscover>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/autodiscover/autodiscover.xml",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"autodiscover",
								"autodiscover.xml"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CopyItem",
			"item": [
				{
					"name": "Get folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify that we received a 200 status and save the folderId of the contacts folder to the environment.",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    const jsonObject = xml2Json(responseBody);",
									"    const responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:GetFolderResponse\"][\"m:ResponseMessages\"][\"m:GetFolderResponseMessage\"];",
									"",
									"    ",
									"    pm.expect(Array.isArray(responseMessage));",
									"    for (const message of responseMessage) {",
									"        pm.expect(message[\"m:ResponseCode\"], `Bad response for ${message}`).to.equal(\"NoError\");",
									"        ",
									"        if (message[\"m:Folders\"][\"t:ContactsFolder\"]) {",
									"            pm.environment.set(\"contactsFolderId\", message[\"m:Folders\"][\"t:ContactsFolder\"][\"t:FolderId\"][\"$\"][\"Id\"]);",
									"        }",
									"        else if (message[\"m:Folders\"][\"t:CalendarFolder\"]) {",
									"            pm.environment.set(\"calendarFolderId\", message[\"m:Folders\"][\"t:CalendarFolder\"][\"t:FolderId\"][\"$\"][\"Id\"]);",
									"        }",
									"        else if (message[\"m:Folders\"][\"t:TasksFolder\"]) {",
									"            pm.environment.set(\"tasksFolderId\", message[\"m:Folders\"][\"t:TasksFolder\"][\"t:FolderId\"][\"$\"][\"Id\"]);",
									"        }",
									"        else if (message[\"m:Folders\"][\"t:Folder\"]) {",
									"            pm.environment.set(\"notesFolderId\", message[\"m:Folders\"][\"t:Folder\"][\"t:FolderId\"][\"$\"][\"Id\"]);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope\n    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n    <soap:Header>\n        <t:RequestServerVersion Version=\"Exchange2007_SP1\"/>\n    </soap:Header>\n    <soap:Body>\n        <m:GetFolder\n            xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n            xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n            <m:FolderShape>\n                <t:BaseShape>IdOnly</t:BaseShape>\n            </m:FolderShape>\n            <m:FolderIds>\n                <t:DistinguishedFolderId Id=\"contacts\"></t:DistinguishedFolderId>\n                <t:DistinguishedFolderId Id=\"notes\"></t:DistinguishedFolderId>\n                <t:DistinguishedFolderId Id=\"calendar\"></t:DistinguishedFolderId>\n                <t:DistinguishedFolderId Id=\"tasks\"></t:DistinguishedFolderId>\n            </m:FolderIds>\n        </m:GetFolder>\n    </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": "EWS GetFolder request in order to get the folderId of the contacts folder to be used when creating a contact"
					},
					"response": []
				},
				{
					"name": "CreateFolder CopyItem Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CreateFolderResponse\"][\"m:ResponseMessages\"][\"m:CreateFolderResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"",
									"    var folderId = responseMessage[\"m:Folders\"][\"t:Folder\"][\"t:FolderId\"][\"$\"];",
									"    pm.environment.set(\"messageTestFolderId\", folderId[\"Id\"])",
									"    pm.environment.set(\"messageTestFolderChangeKey\", folderId[\"ChangeKey\"])",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n      xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <CreateFolder xmlns=\"https://schemas.microsoft.com/exchange/services/2006/messages\">\n      <ParentFolderId>\n        <t:DistinguishedFolderId Id=\"msgfolderroot\"/>\n      </ParentFolderId>\n      <Folders>\n        <t:Folder>\n          <t:DisplayName>CopyItemTest</t:DisplayName>\n        </t:Folder>\n      </Folders>\n    </CreateFolder>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateItem for Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CreateItemResponse\"][\"m:ResponseMessages\"][\"m:CreateItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"",
									"    const $ = cheerio.load(responseBody)",
									"    pm.environment.set('itemId', $('t\\\\:ItemId').attr('id'))",
									"    pm.environment.set('itemChangeKey', $('t\\\\:ItemId').attr('changekey'))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName); ",
									"",
									"const from = pm.environment.get('email');",
									"const to = pm.environment.get('email');",
									"// Create a message with an attachment",
									"const mime = `From: ${from}",
									"Content-Type: multipart/mixed;",
									"\tboundary=\"Apple-Mail=_1495F1FE-BE5A-4460-9766-A0D862091FF9\"",
									"Mime-Version: 1.0 (Mac OS X Mail 13.4 \\(3608.120.23.2.7\\))",
									"Subject: Acceptance Test Message with Attachment",
									"X-Universally-Unique-Identifier: 99303F95-A338-4A4C-B4DA-FE1027C4AC6D",
									"Message-Id: <AEB3B12D-FC90-4DF2-BFB2-38F7872091A2@bfc1b861dd74.ngrok.io>",
									"Date: Mon, 14 Jun 2021 10:23:17 -0400",
									"To: ${to}",
									"",
									"",
									"--Apple-Mail=_1495F1FE-BE5A-4460-9766-A0D862091FF9",
									"Content-Transfer-Encoding: 7bit",
									"Content-Type: text/plain;",
									"\tcharset=us-ascii",
									"",
									"This is for acceptance test.",
									"--Apple-Mail=_1495F1FE-BE5A-4460-9766-A0D862091FF9",
									"Content-Disposition: attachment;",
									"\tfilename=EWSContact.txt",
									"Content-Type: text/plain;",
									"\tx-unix-mode=0644;",
									"\tname=\"EWSContact.txt\"",
									"Content-Transfer-Encoding: quoted-printable",
									"",
									"<t:Contact>",
									"<t:ItemId Id=3D\"14CA9337B4C3786F0025864100760BAA\" =",
									"ChangeKey=3D\"ck-14CA9337B4C3786F0025864100760BAA\"/>",
									"<t:Body BodyType=3D\"Text\"/>",
									"<t:HasAttachments>false</t:HasAttachments>",
									"<t:Culture>en-US</t:Culture>",
									"<t:FileAs>Jane Thomas</t:FileAs>",
									"<t:FileAsMapping>FirstSpaceLast</t:FileAsMapping>",
									"<t:DisplayName>Jane Thomas</t:DisplayName>",
									"<t:GivenName>Jane</t:GivenName>",
									"<t:CompleteName>",
									"<t:FirstName>Jane</t:FirstName>",
									"<t:LastName>Thomas</t:LastName>",
									"<t:FullName>Jane Thomas</t:FullName>",
									"</t:CompleteName>",
									"<t:EmailAddresses>",
									"<t:Entry Key=3D\"EmailAddress1\">jane.thomas@work.com</t:Entry>",
									"<t:Entry Key=3D\"EmailAddress2\">jane.thomas@home.com</t:Entry>",
									"<t:Entry Key=3D\"EmailAddress3\">janet.thomas@work2.com</t:Entry>",
									"</t:EmailAddresses>",
									"<t:PhysicalAddresses>",
									"<t:Entry Key=3D\"Business\">",
									"<t:Street/>",
									"<t:City/>",
									"<t:State/>",
									"<t:CountryOrRegion/>",
									"<t:PostalCode/>",
									"</t:Entry>",
									"<t:Entry Key=3D\"Home\">",
									"<t:Street/>",
									"<t:City/>",
									"<t:State/>",
									"<t:CountryOrRegion/>",
									"<t:PostalCode/>",
									"</t:Entry>",
									"<t:Entry Key=3D\"Other\">",
									"<t:Street/>",
									"<t:City/>",
									"<t:State/>",
									"<t:CountryOrRegion/>",
									"<t:PostalCode/>",
									"</t:Entry>",
									"</t:PhysicalAddresses>",
									"<t:Surname>Thomas</t:Surname>",
									"</t:Contact>=",
									"",
									"--Apple-Mail=_1495F1FE-BE5A-4460-9766-A0D862091FF9--",
									"`;",
									"const base64String = Buffer.from(mime).toString('base64');",
									"pm.environment.set('BASE64_MESSAGE', base64String);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope\n    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n    <soap:Header>\n        <t:RequestServerVersion Version=\"Exchange2007_SP1\"/>\n    </soap:Header>\n    <soap:Body>\n        <m:CreateItem MessageDisposition=\"SaveOnly\"\n            xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n            xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n            <m:Items>\n                <t:Message>\n                    <t:MimeContent>{{BASE64_MESSAGE}}</t:MimeContent>\n                    <t:Importance>Normal</t:Importance>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI PropertyName=\"MessageNotJunkFlag\" PropertySetId=\"A7B529B5-4B75-47A7-A24F-20743D6C55CD\" PropertyType=\"Boolean\"/>\n                        <t:Value>true</t:Value>\n                    </t:ExtendedProperty>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI PropertyTag=\"0xe07\" PropertyType=\"Integer\"/>\n                        <t:Value>1</t:Value>\n                    </t:ExtendedProperty>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI PropertyTag=\"0x1090\" PropertyType=\"Integer\"/>\n                        <t:Value>0</t:Value>\n                    </t:ExtendedProperty>\n                </t:Message>\n            </m:Items>\n        </m:CreateItem>\n    </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CopyItem for Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CopyItemResponse\"][\"m:ResponseMessages\"][\"m:CopyItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.eql(\"NoError\");",
									"",
									"    const $ = cheerio.load(responseBody)",
									"    pm.environment.set('copiedItemId', $('t\\\\:ItemId').attr('id'))",
									"    pm.environment.set('copiedItemChangeKey', $('t\\\\:ItemId').attr('changekey'))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName); ",
									"pm.expect(pm.environment.get(\"messageTestFolderId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"messageTestFolderChangeKey\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <CopyItem xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <ToFolderId>\n        <t:FolderId Id=\"{{messageTestFolderId}}\" ChangeKey=\"{{messageTestFolderChangeKey}}\" />\n      </ToFolderId>\n      <ItemIds>\n\t        <t:ItemId Id=\"{{itemId}}\" ChangeKey=\"{{itemChangeKey}}\" />\n      </ItemIds>\n    </CopyItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify message copied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:GetItemResponse\"][\"m:ResponseMessages\"][\"m:GetItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.eql(\"NoError\");",
									"",
									"    var parentFolderId = responseMessage[\"m:Items\"][\"t:Message\"][\"t:ParentFolderId\"][\"$\"][\"Id\"];",
									"    pm.expect(parentFolderId).to.equal(pm.environment.get('messageTestFolderId'))",
									"    var itemSubject = responseMessage[\"m:Items\"][\"t:Message\"][\"t:Subject\"];",
									"    pm.expect(itemSubject).to.equal(\"Acceptance Test Message with Attachment\");",
									"    var hasAttachments = responseMessage[\"m:Items\"][\"t:Message\"][\"t:HasAttachments\"];",
									"    pm.expect(hasAttachments).to.equal(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"pm.expect(pm.environment.get(\"copiedItemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"copiedItemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n  xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <GetItem\n      xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n      xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n      <ItemShape>\n        <t:BaseShape>Default</t:BaseShape>\n        <t:IncludeMimeContent>true</t:IncludeMimeContent>\n      </ItemShape>\n      <ItemIds>\n        <t:ItemId Id=\"{{copiedItemId}}\" ChangeKey=\"{{copiedItemChangeKey}}\" />\n      </ItemIds>\n    </GetItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:DeleteItemResponse\"][\"m:ResponseMessages\"][\"m:DeleteItemResponseMessage\"];",
									"",
									"    pm.expect(Array.isArray(responseMessage)).to.be.true;",
									"    pm.expect(responseMessage.length).to.equal(2); ",
									"    responseMessage.forEach(message => {",
									"        pm.expect(message[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"    });",
									"    ",
									"    pm.environment.unset(\"copiedItemId\");",
									"    pm.environment.unset(\"copiedItemChangeKey\");",
									"    pm.environment.unset(\"itemId\");",
									"    pm.environment.unset(\"itemChangeKey\");",
									"    pm.environment.unset(\"BASE64_MESSAGE\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"pm.expect(pm.environment.get(\"copiedItemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"copiedItemChangeKey\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n    <soap:Body>\n        <DeleteItem DeleteType=\"HardDelete\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n            <ItemIds>\n                <t:ItemId Id=\"{{itemId}}\" ChangeKey=\"{{itemChangeKey}}\" />\n                <t:ItemId Id=\"{{copiedItemId}}\" ChangeKey=\"{{copiedItemChangeKey}}\" />\n            </ItemIds>\n        </DeleteItem>\n    </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateItem for Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify that we received a 200 status and save the newly created contact's itemId and itemChangeKey to the environment.",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    const jsonObject = xml2Json(responseBody);",
									"    const responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CreateItemResponse\"][\"m:ResponseMessages\"][\"m:CreateItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"",
									"    const $ = cheerio.load(responseBody)",
									"    pm.environment.set('itemId', $('t\\\\:ItemId').attr('id'))",
									"    pm.environment.set('itemChangeKey', $('t\\\\:ItemId').attr('changekey'))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);",
									"pm.expect(pm.environment.get(\"contactsFolderId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope\n    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n    <soap:Header>\n        <t:RequestServerVersion Version=\"Exchange2007_SP1\"/>\n    </soap:Header>\n    <soap:Body>\n        <m:CreateItem MessageDisposition=\"SaveOnly\"\n            xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n            xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n            <m:SavedItemFolderId>\n                <t:FolderId Id=\"{{contactsFolderId}}\"/>\n            </m:SavedItemFolderId>\n            <m:Items>\n                <t:Contact>\n                    <t:FileAsMapping>LastCommaFirst</t:FileAsMapping>\n                    <t:DisplayName>Fozzy Bear</t:DisplayName>\n                    <t:GivenName>Fozzy</t:GivenName>\n                    <t:Surname>Bear</t:Surname>\n                    <t:CompanyName>HCL</t:CompanyName>\n                    <t:EmailAddresses>\n                        <t:Entry Key=\"EmailAddress1\">fozzy.bear@fakemail.com</t:Entry>\n                    </t:EmailAddresses>\n                    <t:PhoneNumbers>\n                        <t:Entry Key=\"MobilePhone\">9195551212</t:Entry>\n                    </t:PhoneNumbers>\n                    <t:PhysicalAddresses>\n                        <t:Entry Key=\"Home\">\n                            <t:Street>1313 Mockingbird Ln</t:Street>\n                            <t:City>Anytown</t:City>\n                            <t:State>NC</t:State>\n                            <t:PostalCode>27613</t:PostalCode>\n                        </t:Entry>\n                    </t:PhysicalAddresses>\n                </t:Contact>\n            </m:Items>\n        </m:CreateItem>\n    </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": "EWS CreateItem request for creating a contact"
					},
					"response": []
				},
				{
					"name": "CopyItem for Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CopyItemResponse\"][\"m:ResponseMessages\"][\"m:CopyItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.eql(\"NoError\");",
									"",
									"    const $ = cheerio.load(responseBody)",
									"    pm.environment.set('copiedItemId', $('t\\\\:ItemId').attr('id'))",
									"    pm.environment.set('copiedItemChangeKey', $('t\\\\:ItemId').attr('changekey'))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName); ",
									"pm.expect(pm.environment.get(\"messageTestFolderId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"messageTestFolderChangeKey\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <CopyItem xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <ToFolderId>\n        <t:FolderId Id=\"{{messageTestFolderId}}\" ChangeKey=\"{{messageTestFolderChangeKey}}\" />\n      </ToFolderId>\n      <ItemIds>\n\t        <t:ItemId Id=\"{{itemId}}\" ChangeKey=\"{{itemChangeKey}}\" />\n      </ItemIds>\n    </CopyItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Contact copied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:GetItemResponse\"][\"m:ResponseMessages\"][\"m:GetItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.eql(\"NoError\");",
									"",
									"    var contact = responseMessage[\"m:Items\"][\"t:Contact\"];",
									"    var parentFolderId = contact[\"t:ParentFolderId\"][\"$\"][\"Id\"];",
									"    pm.expect(parentFolderId).to.equal(pm.environment.get('messageTestFolderId'))",
									"    var company = contact[\"t:CompanyName\"];",
									"    pm.expect(company).to.equal(\"HCL\");",
									"    var first = contact[\"t:CompleteName\"][\"t:FirstName\"];",
									"    pm.expect(first).to.equal(\"Fozzy\");",
									"",
									"    pm.expect(contact[\"t:PhysicalAddresses\"], \"Address missing\").to.not.be.undefined;",
									"    pm.expect(contact[\"t:EmailAddresses\"], \"Email missing\").to.not.be.undefined;",
									"    pm.expect(contact[\"t:PhoneNumbers\"], \"Phone missing\").to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"pm.expect(pm.environment.get(\"copiedItemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"copiedItemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n  xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <GetItem\n      xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n      xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n      <ItemShape>\n        <t:BaseShape>Default</t:BaseShape>\n        <t:IncludeMimeContent>true</t:IncludeMimeContent>\n      </ItemShape>\n      <ItemIds>\n        <t:ItemId Id=\"{{copiedItemId}}\" ChangeKey=\"{{copiedItemChangeKey}}\" />\n      </ItemIds>\n    </GetItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:DeleteItemResponse\"][\"m:ResponseMessages\"][\"m:DeleteItemResponseMessage\"];",
									"",
									"    pm.expect(Array.isArray(responseMessage)).to.be.true;",
									"    pm.expect(responseMessage.length).to.equal(2); ",
									"    responseMessage.forEach(message => {",
									"        pm.expect(message[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"    });",
									"    ",
									"    pm.environment.unset(\"copiedItemId\");",
									"    pm.environment.unset(\"copiedItemChangeKey\");",
									"    pm.environment.unset(\"itemId\");",
									"    pm.environment.unset(\"itemChangeKey\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"pm.expect(pm.environment.get(\"copiedItemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"copiedItemChangeKey\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <DeleteItem DeleteType=\"HardDelete\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <ItemIds>\n        <t:ItemId Id=\"{{itemId}}\" ChangeKey=\"{{itemChangeKey}}\" />\n        <t:ItemId Id=\"{{copiedItemId}}\" ChangeKey=\"{{copiedItemChangeKey}}\" />\n      </ItemIds>\n    </DeleteItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateItem for Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify that we received a 200 status and save the newly created note's itemId and itemChangeKey to the environment.",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    const jsonObject = xml2Json(responseBody);",
									"    const responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CreateItemResponse\"][\"m:ResponseMessages\"][\"m:CreateItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"});",
									"",
									"pm.test(\"Verify create response body\", function() {",
									"    // Parse our the itemId and itemChangeKey and save them to the environment",
									"    const $ = cheerio.load(responseBody);",
									"    const itemId = $('t\\\\:ItemId').attr('id');",
									"    pm.expect(itemId).to.be.a('string');",
									"    const itemChangeKey = $('t\\\\:ItemId').attr('changekey');",
									"    pm.expect(itemChangeKey).to.be.a('string');",
									"",
									"    pm.environment.set('itemId', itemId);",
									"    pm.environment.set('itemChangeKey', itemChangeKey);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"pm.expect(pm.environment.get(\"notesFolderId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope\n    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n    <soap:Header>\n        <t:RequestServerVersion Version=\"Exchange2007_SP1\"/>\n    </soap:Header>\n    <soap:Body>\n        <m:CreateItem MessageDisposition=\"SaveOnly\"\n            xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n            xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n            <m:SavedItemFolderId>\n                <t:FolderId Id=\"{{notesFolderId}}\"/>\n            </m:SavedItemFolderId>\n            <m:Items>\n                <t:Item>\n                    <t:ItemClass>IPM.StickyNote</t:ItemClass>\n                    <t:Subject>New Note</t:Subject>\n                    <t:Body BodyType=\"HTML\">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Test for Automation&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ul class=\"Apple-dash-list\"&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;item 2&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</t:Body>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI PropertyId=\"35584\" PropertySetId=\"0006200E-0000-0000-c000-000000000046\" PropertyType=\"Integer\"/>\n                        <t:Value>3</t:Value>\n                    </t:ExtendedProperty>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI PropertyId=\"35586\" PropertySetId=\"0006200E-0000-0000-c000-000000000046\" PropertyType=\"Integer\"/>\n                        <t:Value>200</t:Value>\n                    </t:ExtendedProperty>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI PropertyId=\"35587\" PropertySetId=\"0006200E-0000-0000-c000-000000000046\" PropertyType=\"Integer\"/>\n                        <t:Value>166</t:Value>\n                    </t:ExtendedProperty>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI PropertyId=\"35588\" PropertySetId=\"0006200E-0000-0000-c000-000000000046\" PropertyType=\"Integer\"/>\n                        <t:Value>110</t:Value>\n                    </t:ExtendedProperty>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI PropertyId=\"35589\" PropertySetId=\"0006200E-0000-0000-c000-000000000046\" PropertyType=\"Integer\"/>\n                        <t:Value>110</t:Value>\n                    </t:ExtendedProperty>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI DistinguishedPropertySetId=\"Common\" PropertyId=\"34064\" PropertyType=\"Integer\"/>\n                        <t:Value>272</t:Value>\n                    </t:ExtendedProperty>\n                </t:Item>\n            </m:Items>\n        </m:CreateItem>\n    </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": "EWS CreateItem request for creating a note"
					},
					"response": []
				},
				{
					"name": "CopyItem for note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CopyItemResponse\"][\"m:ResponseMessages\"][\"m:CopyItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.eql(\"NoError\");",
									"",
									"    const $ = cheerio.load(responseBody)",
									"    pm.environment.set('copiedItemId', $('t\\\\:ItemId').attr('id'))",
									"    pm.environment.set('copiedItemChangeKey', $('t\\\\:ItemId').attr('changekey'))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName); ",
									"pm.expect(pm.environment.get(\"messageTestFolderId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"messageTestFolderChangeKey\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <CopyItem xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <ToFolderId>\n        <t:FolderId Id=\"{{messageTestFolderId}}\" ChangeKey=\"{{messageTestFolderChangeKey}}\" />\n      </ToFolderId>\n      <ItemIds>\n\t        <t:ItemId Id=\"{{itemId}}\" ChangeKey=\"{{itemChangeKey}}\" />\n      </ItemIds>\n    </CopyItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Note copied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonObject = xml2Json(responseBody);",
									"const responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:GetItemResponse\"][\"m:ResponseMessages\"][\"m:GetItemResponseMessage\"];",
									"",
									"// Verify that we received a 200 status from the API call and that the response reflects what we sent in the UpdateItem call.",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"});",
									"",
									"pm.test(\"Verify updated response body for note\", function() {",
									"    const message = responseMessage[\"m:Items\"][\"t:Message\"];",
									"    // Parent folder",
									"    var parentFolderId = message[\"t:ParentFolderId\"][\"$\"][\"Id\"];",
									"    pm.expect(parentFolderId).to.equal(pm.environment.get('messageTestFolderId'))",
									"",
									"    // Item class",
									"    pm.expect(message[\"t:ItemClass\"]).to.equal(\"IPM.StickyNote\");",
									"",
									"    // Subject",
									"    const itemSubject = message[\"t:Subject\"];",
									"    pm.expect(itemSubject).to.equal(\"New Note\");",
									"",
									"    // Body",
									"    const itemStatus = message[\"t:Body\"][\"_\"];",
									"    pm.expect(itemStatus).to.equal('<html><head></head><body>Test for Automation<div><br></div><div><ul class=\"Apple-dash-list\"><li>item 1</li><li>item 2</li></ul></div></body></html>');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"",
									"// Verify that the itemId of the note is set in the enviroonment",
									"pm.expect(pm.environment.get(\"copiedItemId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope\n    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n    <soap:Header>\n        <t:RequestServerVersion Version=\"Exchange2010_SP2\" />\n        <t:MailboxCulture>en-US</t:MailboxCulture>\n        <t:TimeZoneContext>\n            <t:TimeZoneDefinition Id=\"Eastern Standard Time\"/>\n        </t:TimeZoneContext>\n    </soap:Header>\n    <soap:Body>\n        <GetItem\n            xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n            <ItemShape>\n                <t:BaseShape>Default</t:BaseShape>\n                <t:BodyType>Text</t:BodyType>\n                <t:AdditionalProperties>\n                    <t:FieldURI FieldURI=\"item:Attachments\"/>\n                </t:AdditionalProperties>\n            </ItemShape>\n            <ItemIds>\n                <t:ItemId Id=\"{{copiedItemId}}\"/>\n            </ItemIds>\n        </GetItem>\n    </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": "EWS GetItem request for fetching a note after it has been updated"
					},
					"response": []
				},
				{
					"name": "Delete Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:DeleteItemResponse\"][\"m:ResponseMessages\"][\"m:DeleteItemResponseMessage\"];",
									"",
									"    pm.expect(Array.isArray(responseMessage)).to.be.true;",
									"    pm.expect(responseMessage.length).to.equal(2); ",
									"    responseMessage.forEach(message => {",
									"        pm.expect(message[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"    });",
									"    ",
									"    pm.environment.unset(\"copiedItemId\");",
									"    pm.environment.unset(\"copiedItemChangeKey\");",
									"    pm.environment.unset(\"itemId\");",
									"    pm.environment.unset(\"itemChangeKey\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"pm.expect(pm.environment.get(\"copiedItemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"copiedItemChangeKey\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <DeleteItem DeleteType=\"HardDelete\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <ItemIds>\n        <t:ItemId Id=\"{{itemId}}\" ChangeKey=\"{{itemChangeKey}}\" />\n        <t:ItemId Id=\"{{copiedItemId}}\" ChangeKey=\"{{copiedItemChangeKey}}\" />\n      </ItemIds>\n    </DeleteItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateItem for Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify that we received a 200 status and save the newly created task's itemId and itemChangeKey to the environment.",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    const jsonObject = xml2Json(responseBody);",
									"    const responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CreateItemResponse\"][\"m:ResponseMessages\"][\"m:CreateItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set('itemId', $('t\\\\:ItemId').attr('id'));",
									"    pm.environment.set('itemChangeKey', $('t\\\\:ItemId').attr('changekey'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"",
									"// Verify that the taskFolderId environment variable is set.",
									"pm.expect(pm.environment.get(\"tasksFolderId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope\n    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n    <soap:Header>\n        <t:RequestServerVersion Version=\"V2016_04_13\" />\n        <t:MailboxCulture>en-US</t:MailboxCulture>\n        <t:TimeZoneContext>\n            <t:TimeZoneDefinition Id=\"Eastern Standard Time\"/>\n        </t:TimeZoneContext>\n    </soap:Header>\n    <soap:Body>\n        <CreateItem\n            xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\" MessageDisposition=\"SaveOnly\">\n            <SavedItemFolderId>\n                <t:FolderId Id=\"{{tasksFolderId}}\"/>\n            </SavedItemFolderId>\n            <Items>\n                <t:Task>\n                    <t:Subject>Test Task</t:Subject>\n                    <t:Sensitivity>Normal</t:Sensitivity>\n                    <t:Body BodyType=\"HTML\">&lt;html\n                        xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot;\n                        xmlns:w=&quot;urn:schemas-microsoft-com:office:word&quot;\n                        xmlns:m=&quot;http://schemas.microsoft.com/office/2004/12/omml&quot;\n                        xmlns=&quot;http://www.w3.org/TR/REC-html40&quot;&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type content=&quot;text/html; charset=utf-8&quot;&gt;&lt;meta name=Generator content=&quot;Microsoft Word 15 (filtered medium)&quot;&gt;&lt;style&gt;&lt;!--\n/* Font Definitions */\n@font-face\n\t{font-family:&quot;Cambria Math&quot;;\n\tpanose-1:2 4 5 3 5 4 6 3 2 4;}\n@font-face\n\t{font-family:Calibri;\n\tpanose-1:2 15 5 2 2 2 4 3 2 4;}\n/* Style Definitions */\np.MsoNormal, li.MsoNormal, div.MsoNormal\n\t{margin:0in;\n\tfont-size:11.0pt;\n\tfont-family:&quot;Calibri&quot;,sans-serif;}\nspan.EmailStyle17\n\t{mso-style-type:personal-compose;\n\tfont-family:&quot;Calibri&quot;,sans-serif;\n\tcolor:windowtext;}\n.MsoChpDefault\n\t{mso-style-type:export-only;\n\tfont-family:&quot;Calibri&quot;,sans-serif;}\n@page WordSection1\n\t{size:8.5in 11.0in;\n\tmargin:1.0in 1.0in 1.0in 1.0in;}\ndiv.WordSection1\n\t{page:WordSection1;}\n--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body lang=EN-US link=&quot;#0563C1&quot; vlink=&quot;#954F72&quot; style=&apos;word-wrap:break-word&apos;&gt;&lt;div class=WordSection1&gt;&lt;p class=MsoNormal&gt;This is a test task&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n                    </t:Body>\n                    <t:Importance>Normal</t:Importance>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI DistinguishedPropertySetId=\"Common\" PropertyId=\"34051\" PropertyType=\"Boolean\"/>\n                        <t:Value>false</t:Value>\n                    </t:ExtendedProperty>\n                    <t:ExtendedProperty>\n                        <t:ExtendedFieldURI DistinguishedPropertySetId=\"Task\" PropertyId=\"33031\" PropertyType=\"Boolean\"/>\n                        <t:Value>false</t:Value>\n                    </t:ExtendedProperty>\n                    <t:DueDate>2020-10-27T11:59:00Z</t:DueDate>\n                </t:Task>\n            </Items>\n        </CreateItem>\n    </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": "EWS CreateItem request for creating a task"
					},
					"response": []
				},
				{
					"name": "CopyItem for task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:CopyItemResponse\"][\"m:ResponseMessages\"][\"m:CopyItemResponseMessage\"];",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.eql(\"NoError\");",
									"",
									"    const $ = cheerio.load(responseBody)",
									"    pm.environment.set('copiedItemId', $('t\\\\:ItemId').attr('id'))",
									"    pm.environment.set('copiedItemChangeKey', $('t\\\\:ItemId').attr('changekey'))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName); ",
									"pm.expect(pm.environment.get(\"messageTestFolderId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"messageTestFolderChangeKey\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <CopyItem xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <ToFolderId>\n        <t:FolderId Id=\"{{messageTestFolderId}}\" ChangeKey=\"{{messageTestFolderChangeKey}}\" />\n      </ToFolderId>\n      <ItemIds>\n\t        <t:ItemId Id=\"{{itemId}}\" ChangeKey=\"{{itemChangeKey}}\" />\n      </ItemIds>\n    </CopyItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Task copied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonObject = xml2Json(responseBody);",
									"const responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:GetItemResponse\"][\"m:ResponseMessages\"][\"m:GetItemResponseMessage\"];",
									"",
									"// Verify that we received a 200 status from the API call and that the response reflects what we sent in the UpdateItem call.",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"});",
									"",
									"pm.test(\"Verify updated response body for note\", function() {",
									"    const task = responseMessage[\"m:Items\"][\"t:Task\"];",
									"    // Parent folder",
									"    var parentFolderId = task[\"t:ParentFolderId\"][\"$\"][\"Id\"];",
									"    pm.expect(parentFolderId).to.equal(pm.environment.get('messageTestFolderId'))",
									"",
									"    // Item class",
									"    pm.expect(task[\"t:ItemClass\"]).to.equal(\"IPM.Task\");",
									"",
									"    // Subject",
									"    const itemSubject = task[\"t:Subject\"];",
									"    pm.expect(itemSubject).to.equal(\"Test Task\");",
									"",
									"    // Body",
									"    const itemBody = task[\"t:Body\"][\"_\"];",
									"    pm.expect(itemBody).to.equal('This is a test task');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"",
									"// Verify that the itemId of the note is set in the enviroonment",
									"pm.expect(pm.environment.get(\"copiedItemId\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope\n    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n    <soap:Header>\n        <t:RequestServerVersion Version=\"Exchange2010_SP2\" />\n        <t:MailboxCulture>en-US</t:MailboxCulture>\n        <t:TimeZoneContext>\n            <t:TimeZoneDefinition Id=\"Eastern Standard Time\"/>\n        </t:TimeZoneContext>\n    </soap:Header>\n    <soap:Body>\n        <GetItem\n            xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n            <ItemShape>\n                <t:BaseShape>Default</t:BaseShape>\n                <t:BodyType>Text</t:BodyType>\n                <t:AdditionalProperties>\n                    <t:FieldURI FieldURI=\"item:Attachments\"/>\n                    <t:FieldURI FieldURI=\"item:Body\"/>\n                </t:AdditionalProperties>\n            </ItemShape>\n            <ItemIds>\n                <t:ItemId Id=\"{{copiedItemId}}\"/>\n            </ItemIds>\n        </GetItem>\n    </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": "EWS GetItem request for fetching a note after it has been updated"
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:DeleteItemResponse\"][\"m:ResponseMessages\"][\"m:DeleteItemResponseMessage\"];",
									"",
									"    pm.expect(Array.isArray(responseMessage)).to.be.true;",
									"    pm.expect(responseMessage.length).to.equal(2); ",
									"    responseMessage.forEach(message => {",
									"        pm.expect(message[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"    });",
									"    ",
									"    pm.environment.unset(\"copiedItemId\");",
									"    pm.environment.unset(\"copiedItemChangeKey\");",
									"    pm.environment.unset(\"itemId\");",
									"    pm.environment.unset(\"itemChangeKey\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName);    ",
									"pm.expect(pm.environment.get(\"copiedItemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"copiedItemChangeKey\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemId\")).to.be.a('string');",
									"pm.expect(pm.environment.get(\"itemChangeKey\")).to.be.a('string');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <DeleteItem DeleteType=\"HardDelete\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <ItemIds>\n        <t:ItemId Id=\"{{itemId}}\" ChangeKey=\"{{itemChangeKey}}\" />\n        <t:ItemId Id=\"{{copiedItemId}}\" ChangeKey=\"{{copiedItemChangeKey}}\" />\n      </ItemIds>\n    </DeleteItem>\n  </soap:Body>\n</soap:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteFolder CopyItem Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    var jsonObject = xml2Json(responseBody);",
									"    var responseMessage = jsonObject[\"soap:Envelope\"][\"soap:Body\"][\"m:DeleteFolderResponse\"][\"m:ResponseMessages\"][\"m:DeleteFolderResponseMessage\"];",
									"    pm.expect(responseMessage[\"m:ResponseCode\"]).to.equal(\"NoError\");",
									"",
									"    pm.environment.unset(\"messageTestFolderId\");",
									"    pm.environment.unset(\"messageTestFolderChangeKey\");",
									"",
									"    // Cleanup from Get folders",
									"    pm.environment.unset(\"contactsFolderId\");",
									"    pm.environment.unset(\"calendarFolderId\");",
									"    pm.environment.unset(\"tasksFolderId\");",
									"    pm.environment.unset(\"notesFolderId\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Running: \"+ pm.info.requestName); ",
									"pm.expect(pm.environment.get(\"messageTestFolderId\")).to.be.a('string');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <DeleteFolder xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n                  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" \n                  DeleteType=\"HardDelete\" >\n      <FolderIds>\n        <t:FolderId Id=\"{{messageTestFolderId}}\" />\n      </FolderIds>\n    </DeleteFolder>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "CopyItem test for all item types"
		},
		{
			"name": "GetUserPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <Header>\n      <RequestServerVersion Version=\"Exchange2016\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\"/>\n   </Header>\n   <Body>\n      <GetUserPhoto xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n         <Email>leviastan@llqdev.onmicrosoft.com</Email>\n         <SizeRequested>HR48x48</SizeRequested>\n         <TypeRequested>UserPhoto</TypeRequested>\n      </GetUserPhoto>\n   </Body>\n</Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "SetUserPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"// TODO:  Remove this when LABS-729 is fixed to re-enable the GetUserOofSettings test",
							"postman.setNextRequest(\"SetUserOofSettings\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <Header>\n      <RequestServerVersion Version=\"Exchange2016\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\"/>\n   </Header>\n   <Body>\n      <SetUserPhoto xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n         <Email>leviastan@llqdev.onmicrosoft.com</Email>\n         <Content></Content>\n         <TypeRequested>UserPhoto</TypeRequested>\n      </SetUserPhoto>\n   </Body>\n</Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "FAILS (LABS-792) GetUserOofSettings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Header>\n      <t:RequestServerVersion Version=\"Exchange2016\"/>\n  </soap:Header>\n  <soap:Body>\n    <m:GetUserOofSettingsRequest>\n      <t:Mailbox>\n        <t:Address>{{email}}</t:Address>\n      </t:Mailbox>\n    </m:GetUserOofSettingsRequest>\n  </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				},
				"description": "TODO:  Remove the postman.setNextRequest() call in the SetUserPhoto test to re-enable this test once LABS-792 is fixed."
			},
			"response": []
		},
		{
			"name": "SetUserOofSettings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Header>\n      <RequestServerVersion Version=\"Exchange2016\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\"/>\n  </soap:Header>\n  <soap:Body>\n    <SetUserOofSettingsRequest xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <Mailbox xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n        <Name>leviastan</Name>\n        <Address>leviastan@llqdev.onmicrosoft.com</Address>\n        <RoutingType>SMTP</RoutingType>\n      </Mailbox>\n      <UserOofSettings xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n        <OofState>Enabled</OofState>\n        <ExternalAudience>All</ExternalAudience>\n        <Duration>\n          <StartTime>aasdf</StartTime>\n          <EndTime>2006-10-25T12:12:00Z</EndTime>\n        </Duration>\n        <InternalReply>\n          <Message>I am out of office.  This is my internal reply.</Message>\n        </InternalReply>\n        <ExternalReply xml:lang=\"zh\">\n          <Message>I am out of office. This is my external reply.</Message>\n        </ExternalReply>\n        <EventsToDeleteIDs>\n        \t<EventToDeleteID>AAAAA==</EventToDeleteID>\n        \t<EventToDeleteID>BBBBB==</EventToDeleteID>\n        </EventsToDeleteIDs>\n      </UserOofSettings>\n    </SetUserOofSettingsRequest>\n  </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserAvailability",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Header>\n    <t:RequestServerVersion Version=\"Exchange2016\"/>\n  </soap:Header>\n  <soap:Body>\n    <GetUserAvailabilityRequest xmlns=\"https://schemas.microsoft.com/exchange/services/2006/messages\"\n                xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\">\n      <t:TimeZone xmlns=\"https://schemas.microsoft.com/exchange/services/2006/types\">\n        <Bias>480</Bias>\n        <StandardTime>\n          <Bias>0</Bias>\n          <Time>02:00:00</Time>\n          <DayOrder>5</DayOrder>\n          <Month>10</Month>\n          <DayOfWeek>Sunday</DayOfWeek>\n        </StandardTime>\n        <DaylightTime>\n          <Bias>-60</Bias>\n          <Time>02:00:00</Time>\n          <DayOrder>1</DayOrder>\n          <Month>4</Month>\n          <DayOfWeek>Sunday</DayOfWeek>\n        </DaylightTime>\n      </t:TimeZone>\n      <MailboxDataArray>\n        <t:MailboxData>\n          <t:Email>\n            <t:Address>user1@example.com</t:Address>\n          </t:Email>\n          <t:AttendeeType>Required</t:AttendeeType>\n          <t:ExcludeConflicts>false</t:ExcludeConflicts>\n        </t:MailboxData>\n        <t:MailboxData>\n          <t:Email>\n            <t:Address>user2@example.com</t:Address>\n          </t:Email>\n          <t:AttendeeType>Required</t:AttendeeType>\n          <t:ExcludeConflicts>false</t:ExcludeConflicts>\n        </t:MailboxData>\n      </MailboxDataArray>\n      <t:FreeBusyViewOptions>\n        <t:TimeWindow>\n          <t:StartTime>2006-10-16T00:00:00</t:StartTime>\n          <t:EndTime>2006-10-16T23:59:59</t:EndTime>\n        </t:TimeWindow>\n        <t:MergedFreeBusyIntervalInMinutes>60</t:MergedFreeBusyIntervalInMinutes>\n        <t:RequestedView>FreeBusy DetailedMerged</t:RequestedView>\n      </t:FreeBusyViewOptions>\n    </GetUserAvailabilityRequest>\n  </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetClientAccessToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n               xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n   <soap:Header>\n      <t:RequestServerVersion Version=\"Exchange2016\" />\n   </soap:Header>\n   <soap:Body>\n      <m:GetClientAccessToken>\n         <m:TokenRequests>\n            <t:TokenRequest>\n               <t:Id>1C50226D-04B5-4AB2-9FCD-42E236B59E4B</t:Id>\n               <t:TokenType>CallerIdentity</t:TokenType>\n            </t:TokenRequest>\n            <t:TokenRequest>\n               <t:Id>1C50226D-04B5-4AB2-9FCD-42E236B59E4B</t:Id>\n               <t:TokenType>ExtensionCallback</t:TokenType>\n            </t:TokenRequest>\n         </m:TokenRequests>\n      </m:GetClientAccessToken>\n   </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "FindPeople",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n               xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n   <soap:Header>\n    <t:RequestServerVersion Version=\"Exchange2016\" />\n   </soap:Header>\n   <soap:Body >\n    <m:FindPeople>\n      <m:PersonaShape>\n        <t:BaseShape>IdOnly</t:BaseShape>\n        <t:AdditionalProperties>\n          <t:FieldURI FieldURI=\"persona:DisplayName\"/>\n          <t:IndexedFieldURI FieldURI=\"persona:Title\" FieldIndex=\"ADAAA==\"/>\n        </t:AdditionalProperties>\n      </m:PersonaShape>\n      <m:IndexedPageItemView BasePoint=\"Beginning\" MaxEntriesReturned=\"100\" Offset=\"0\"/>\n      <m:ParentFolderId>\n        <t:DistinguishedFolderId Id=\"directory\"/>\n      </m:ParentFolderId>\n      <m:QueryString>query</m:QueryString>\n      <m:Restriction>\n      \t<t:Or>\n      \t\t<t:IsEqualTo>\n\t      \t\t<t:IndexedFieldURI FieldURI=\"persona:DisplayName\" FieldIndex=\"ADODS==\">\n\t      \t\t</t:IndexedFieldURI>\n      \t\t\t<t:FieldURIOrConstant>\n      \t\t\t\t<t:Constant Value=\"tom\"></t:Constant>\n      \t\t\t</t:FieldURIOrConstant>\n      \t\t</t:IsEqualTo>\n      \t\t<t:IsGreaterThan>\n\t      \t\t<t:IndexedFieldURI FieldURI=\"persona:DisplayName\" FieldIndex=\"ADODS==\">\n\t      \t\t</t:IndexedFieldURI>\n      \t\t\t<t:FieldURIOrConstant>\n      \t\t\t\t<t:Constant Value=\"111\"></t:Constant>\n      \t\t\t</t:FieldURIOrConstant>\n      \t\t</t:IsGreaterThan>\n\t      \t<t:Exists>\n\t      \t\t<t:IndexedFieldURI FieldURI=\"persona:DisplayName\" FieldIndex=\"ADODS==\">\n\t      \t\t</t:IndexedFieldURI>\n\t      \t</t:Exists>\n\t      \t<t:Not>\n\t\t      \t<t:Exists>\n\t\t      \t\t<t:IndexedFieldURI FieldURI=\"persona:DisplayName\" FieldIndex=\"JDSKS==\">\n\t\t      \t\t</t:IndexedFieldURI>\n\t\t      \t</t:Exists>\n\t      \t</t:Not>\n\t      \t<t:Near>\n\t      \t\t<t:Contains ContainmentMode=\"FullString\" ContainmentComparison=\"LooseAndIgnoreCase\">\n\t\t      \t\t<t:IndexedFieldURI FieldURI=\"persona:DisplayName\" FieldIndex=\"WWWW+=\">\n\t\t      \t\t</t:IndexedFieldURI>\n\t\t      \t\t<t:Constant Value=\"tom\"></t:Constant>\n\t\t      \t</t:Contains>\n\t      \t\t<t:Contains ContainmentMode=\"FullString\" ContainmentComparison=\"LooseAndIgnoreCase\">\n\t\t      \t\t<t:IndexedFieldURI FieldURI=\"persona:DisplayName\" FieldIndex=\"WWWW+=\">\n\t\t      \t\t</t:IndexedFieldURI>\n\t\t      \t\t<t:Constant Value=\"mike\"></t:Constant>\n\t\t      \t</t:Contains>\n\t      \t\t<t:Distance>100</t:Distance>\n\t      \t\t<t:Ordered>true</t:Ordered>\n\t      \t</t:Near>\n      \t</t:Or>\n      </m:Restriction>\n    </m:FindPeople>\n  </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPersona",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n   <soap:Header>\n      <t:RequestServerVersion Version=\"Exchange2016\"/>\n   </soap:Header>\n   <soap:Body xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n      <m:GetPersona>\n         <m:PersonaId Id=\"AAUQAGOh/ljw4f1EnH1ragAAJkA=\"/>\n         <m:ParentFolderId>\n         \t<m:FolderId Id=\"AAMkA=\" ChangeKey=\"EQAAABY+\"/>\n         \t<m:AddressListId Id=\"DKSL==\"/>\n          \t<m:DistinguishedFolderId Id=\"AAMkA=\" ChangeKey=\"EQAAABY+\">\n          \t\t<m:Mailbox>\n\t                <m:Name>leviastan</m:Name>\n\t                <m:EmailAddress>leviastan@llqdev.onmicrosoft.com</m:EmailAddress>\n\t                <m:RoutingType>SMTP</m:RoutingType>\n\t                <m:MailboxType>Mailbox</m:MailboxType>\n          \t\t</m:Mailbox>\n          \t</m:DistinguishedFolderId>\n         </m:ParentFolderId>\n         <m:AdditionalProperties>\n           <t:FieldURI FieldURI=\"persona:DisplayName\"/>\n           <t:IndexedFieldURI FieldURI=\"persona:Title\" FieldIndex=\"ADAAA==\"/>\n         </m:AdditionalProperties>\n      </m:GetPersona>\n   </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetInboxRules",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n        xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n        xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Header>\n    <t:RequestServerVersion Version=\"Exchange2016\" />\n  </soap:Header>\n  <soap:Body>\n    <m:GetInboxRules>\n      <m:MailboxSmtpAddress>leviastan@llqdev.onmicrosoft.com</m:MailboxSmtpAddress>\n    </m:GetInboxRules>\n  </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateInboxRules",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n               xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n  <soap:Header>\n    <t:RequestServerVersion Version=\"Exchange2016\"/>\n  </soap:Header>\n  <soap:Body>\n      <m:UpdateInboxRules>\n        <m:RemoveOutlookRuleBlob>true</m:RemoveOutlookRuleBlob>\n        <m:Operations>\n          <t:CreateRuleOperation>\n            <t:Rule>\n              <t:DisplayName>MoveInterestingToJunk</t:DisplayName>\n              <t:Priority>1</t:Priority>\n              <t:IsEnabled>true</t:IsEnabled>\n              <t:Conditions>\n              \t<t:FromAddresses>\n              \t\t<t:Address>\n              \t\t\t<t:EmailAddress>aaa@llqdev.onmicrosoft.com</t:EmailAddress>\n              \t\t</t:Address>\n              \t\t<t:Address>\n              \t\t\t<t:EmailAddress>bbb@llqdev.onmicrosoft.com</t:EmailAddress>\n              \t\t</t:Address>\n              \t</t:FromAddresses>\n                <t:ContainsSubjectStrings>\n                  <t:String>Interesting</t:String>\n                </t:ContainsSubjectStrings>\n              </t:Conditions>\n              <t:Exceptions/>\n              <t:Actions>\n                <t:MoveToFolder>\n                  <t:DistinguishedFolderId Id=\"junkemail\" />\n                </t:MoveToFolder>\n              </t:Actions>\n            </t:Rule>\n          </t:CreateRuleOperation>\n          <t:SetRuleOperation>\n            <t:Rule>\n              <t:RuleId>SDxlkAA==</t:RuleId>\n              <t:DisplayName>MoveToImportant</t:DisplayName>\n              <t:Priority>2</t:Priority>\n              <t:IsEnabled>false</t:IsEnabled>\n              <t:Conditions>\n                <t:ContainsSubjectStrings>\n                  <t:String>Important</t:String>\n                </t:ContainsSubjectStrings>\n              </t:Conditions>\n              <t:Exceptions/>\n              <t:Actions>\n                <t:MoveToFolder>\n                  <t:DistinguishedFolderId Id=\"important\" />\n                </t:MoveToFolder>\n              </t:Actions>\n            </t:Rule>\n          </t:SetRuleOperation>\n          <t:DeleteRuleOperation>\n          \t<t:RuleId>SDUIH==</t:RuleId>\n          </t:DeleteRuleOperation>\n        </m:Operations>\n      </m:UpdateInboxRules>\n  </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "MarkAllItemsAsRead",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" \n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <soap:Header>\n      <t:RequestServerVersion Version=\"Exchange2013\" />\n   </soap:Header>\n   <soap:Body>\n      <m:MarkAllItemsAsRead>\n         <m:ReadFlag>true</m:ReadFlag>\n         <m:SuppressReadReceipts>true</m:SuppressReadReceipts>\n         <m:FolderIds>\n            <t:DistinguishedFolderId Id=\"inbox\"/>\n         </m:FolderIds>\n      </m:MarkAllItemsAsRead>\n   </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ConvertId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Header>\n    <t:RequestServerVersion Version=\"Exchange2010\"/>\n  </soap:Header>\n  <soap:Body>\n    <ConvertId xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n               DestinationFormat=\"OwaId\">\n      <SourceIds>\n        <t:AlternateId Format=\"EwsId\" Id=\"AAMkAGZhN2IxYTA0LWNiNzItN=\"\n                       Mailbox=\"user1@example.com\"/>\n      </SourceIds>\n    </ConvertId>\n  </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ResolveNames",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <ResolveNames xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\n                  xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n                  ReturnFullContactData=\"true\">\n      <UnresolvedEntry>User2@email.com</UnresolvedEntry>\n    </ResolveNames>\n  </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAppMarketplaceUrl",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope\n    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"\n    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n    <soap:Header>\n        <t:RequestServerVersion Version=\"Exchange2013\" />\n        <t:MailboxCulture>en-US</t:MailboxCulture>\n        <t:TimeZoneContext>\n            <t:TimeZoneDefinition Id=\"China Standard Time\"/>\n        </t:TimeZoneContext>\n    </soap:Header>\n    <soap:Body>\n        <m:GetAppMarketplaceUrl>\n            <m:ApiVersionSupported>1.8</m:ApiVersionSupported>\n            <m:SchemaVersionSupported>1.1</m:SchemaVersionSupported>\n        </m:GetAppMarketplaceUrl>\n    </soap:Body>\n</soap:Envelope>\n",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "FindItem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <FindItem xmlns=\"https://schemas.microsoft.com/exchange/services/2006/messages\"\n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\"\n              Traversal=\"Shallow\">\n      <ItemShape>\n        <t:BaseShape>IdOnly</t:BaseShape>\n      </ItemShape>\n      <ParentFolderIds>\n        <t:DistinguishedFolderId Id=\"deleteditems\"/>\n      </ParentFolderIds>\n    </FindItem>\n  </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPasswordExpirationDate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:m=\"https://schemas.microsoft.com/exchange/services/2006/messages\"\n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Header>\n  </soap:Header>\n  <soap:Body>\n    <tns:GetPasswordExpirationDate>\n      <tns:MailboxSmtpAddress>user1@DTZMZX-dom.extest.microsoft.com</tns:MailboxSmtpAddress>\n    </tns:GetPasswordExpirationDate>\n  </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ExpandDL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\">\n  <soap:Body>\n    <ExpandDL xmlns=\"https://schemas.microsoft.com/exchange/services/2006/messages\"\n              xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\">\n        <t:Mailbox>\n          <t:EmailAddress>TheDistributionList</t:EmailAddress>\n        </t:Mailbox>\n    </ExpandDL>\n  </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ApplyConversationAction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\"\n               xmlns:m=\"https://schemas.microsoft.com/exchange/services/2006/messages\">\n  <soap:Header>\n    <t:RequestServerVersion Version=\"Exchange2010_SP1\" />\n  </soap:Header>\n  <soap:Body>\n    <m:ApplyConversationAction>\n      <m:ConversationActions>\n        <t:ConversationAction>\n          <t:Action>AlwaysMove</t:Action>\n          <t:ConversationId Id=\"AAQkADVkNjM1EH39AWcDUGrnrnJ32hHpdc=\"/>\n          <t:DestinationFolderId>\n            <t:FolderId Id=\"AAMkADVkNjM1ODI3LTEwYTAtNDUBTTT6tWal35iSoKAAAABZZWAAA=\"/>\n          </t:DestinationFolderId>\n        </t:ConversationAction>\n      </m:ConversationActions>\n    </m:ApplyConversationAction>\n  </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetConversationItems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:m=\"https://schemas.microsoft.com/exchange/services/2006/messages\" \n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <soap:Header>\n      <t:RequestServerVersion Version=\"Exchange2013\" />\n   </soap:Header>\n   <soap:Body>\n      <m:GetConversationItems>\n         <m:ItemShape>\n            <t:BaseShape>IdOnly</t:BaseShape>\n            <t:AdditionalProperties>\n               <t:FieldURI FieldURI=\"item:Subject\" />\n               <t:FieldURI FieldURI=\"item:DateTimeReceived\" />\n            </t:AdditionalProperties>\n         </m:ItemShape>\n         <m:FoldersToIgnore>\n            <t:DistinguishedFolderId Id=\"deleteditems\" />\n            <t:DistinguishedFolderId Id=\"drafts\" />\n         </m:FoldersToIgnore>\n         <m:SortOrder>TreeOrderDescending</m:SortOrder>\n         <m:Conversations>\n            <t:Conversation>\n               <t:ConversationId Id=\"AAQkADEzOTExYjJkakJCs=\" />\n            </t:Conversation>\n         </m:Conversations>\n      </m:GetConversationItems>\n   </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "FindConversation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\"\n               xmlns:m=\"https://schemas.microsoft.com/exchange/services/2006/messages\">\n  <soap:Header>\n    <t:RequestServerVersion Version=\"Exchange2010_SP1\" />\n  </soap:Header>\n  <soap:Body>\n    <m:FindConversation>\n      <m:IndexedPageItemView BasePoint=\"Beginning\" MaxEntriesReturned=\"1\" Offset=\"0\"/>\n      <m:ParentFolderId>\n        <t:DistinguishedFolderId Id =\"inbox\"/>\n      </m:ParentFolderId>\n    </m:FindConversation>\n  </soap:Body>\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const email = pm.environment.get(\"email\");",
					"if (!email) {",
					"    throw new Error(\"email environment variable not set\");",
					"}",
					"const password = pm.environment.get(\"password\");",
					"if (!password) {",
					"    throw new Error(\"password environment variable not set\");",
					"}",
					"",
					"const authValue = `${email}:${password}`",
					"const authHeader = `Basic ${Buffer.from(authValue).toString('base64')}`;",
					"pm.request.headers.add( { key: 'Authorization', value: authHeader } );",
					"pm.request.headers.add( { key: 'X-User-Identity', value: email } );"
				]
			}
		}
	]
}